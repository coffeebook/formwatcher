// Generated by CoffeeScript 1.3.1
(function() {

  Formwatcher.tests = function() {
    module("Formwatcher", {
      setup: function() {
        return tmpDiv.empty();
      },
      teardown: function() {
        return tmpDiv.empty();
      }
    });
    test("new Watcher()", function() {
      var form, form2;
      form = $("<form id=\"testform\" action=\"javascript:undefined;\"></form>");
      form2 = $("<form id=\"testform2\" action=\"javascript:undefined;\"></form>");
      tmpDiv.append(form).append(form2).append($("<div id=\"testtest\"></div>"));
      strictEqual(form.fwData("watcher"), undefined, "Initially there shouldn't be a watcher attached.");
      new Watcher($("#testform"));
      ok(form.fwData("watcher"), "The formwatcher should be attached to form when jQuery object is passed.");
      strictEqual(form2.fwData("watcher"), undefined, "Initially there shouldn't be a watcher attached.");
      new Watcher("testform2");
      ok(form2.fwData("watcher"), "The formwatcher should be attached to form when the id as string is passed.");
      raises(function() {
        return new Watcher("blabla");
      }, "If the form is not found it throws an exception.");
      raises(function() {
        return new Watcher("##sdf");
      }, "If the form id is not formatted correctly it throws an exception");
      raises(function() {
        return new Watcher($("span"));
      }, "If a faulty jQuery object is passed it throws an exception");
      raises(function() {
        return new Watcher($("testtest"));
      }, "If the jQuery element is not a form it throws an exception");
      return raises(function() {
        return new Watcher("testtest");
      }, "If the element id is not a form it throws an exception");
    });
    test("Formwatcher.watch()", function() {
      var form;
      form = $("<form id=\"testform\" action=\"javascript:undefined;\"></form>");
      tmpDiv.append(form);
      strictEqual(form.fwData("watcher"), undefined, "Initially there shouldn't be a watcher attached.");
      Formwatcher.watch("testform");
      return ok(form.fwData("watcher"), "The formwatcher should be attached to form because document was already loaded");
    });
    test("getLabel()", function() {
      var elements, label;
      label = void 0;
      elements = void 0;
      this.label1 = $.create("<label id=\"test-label1-id\"></label>");
      this.label2 = $.create("<label id=\"test-label2-id\"></label>");
      this.input = $.create("<input id=\"test-input-id\"></input>");
      tmpDiv.append(this.label1).append(this.label2).append(this.input);
      elements = {
        input: this.input
      };
      label = Formwatcher.getLabel(elements, true);
      equal(label.attr("id"), this.label2.attr("id"), "Should have returned the label right before the input because of automatch.");
      label = Formwatcher.getLabel(elements, false);
      strictEqual(label, undefined, "getLabel() should return undefined without automatch.");
      this.label1.attr("for", this.input.attr("id"));
      label = Formwatcher.getLabel(elements, false);
      equal(label.attr("id"), this.label1.attr("id"), "Should return the first label because it has the for attribute (without automatch).");
      label = Formwatcher.getLabel(elements, true);
      equal(label.attr("id"), this.label1.attr("id"), "Should return the first label because it has the for attribute even with automatch.");
      tmpDiv.empty();
      elements = {
        input: $("<input></input>")
      };
      tmpDiv.append(elements.input);
      equal(Formwatcher.getLabel(elements, true), undefined, "autoMatch: true; Should return undefined when there no element before the input.");
      return equal(Formwatcher.getLabel(elements, false), undefined, "autoMatch: false;  Should return undefined when there no element before the input.");
    });
    test("Multiple submit buttons", function() {
      var allHidden, hidden;
      this.form = $.create("<form action=\"javascript:undefined;\"><button type=\"submit\" name=\"buttonA\" value=\"valueA\">buttonA</button><button type=\"submit\" name=\"buttonB\" value=\"valueB\">buttonB</button></form>");
      this.buttonA = $("button[name=buttonA]", this.form);
      this.buttonB = $("button[name=buttonB]", this.form);
      tmpDiv.append(this.form);
      new Watcher(this.form, {
        ajax: false
      });
      this.x = 4;
      this.buttonA.click();
      allHidden = $('input[type="hidden"]', this.form);
      equal(allHidden.length, 1, "There should only be one hidden field for the right button");
      hidden = $("input[type=\"hidden\"][name=\"buttonA\"]", this.form);
      equal(hidden.length, 1, "Click on button A should create a hidden input field with the same name as the button");
      equal(hidden.attr("value"), "valueA", "...and should set the value of the button");
      this.buttonB.click();
      allHidden = $('input[type="hidden"]', this.form);
      equal(allHidden.length, 1, "There should only be one hidden field for the right button");
      hidden = $("input[type=hidden][name=buttonB]", this.form);
      equal(hidden.length, 1, "Click on button A should create a hidden input field with the same name as the button");
      return equal(hidden.attr("value"), "valueB", "...and should set the value of the button");
    });
    test("scanDocument", function() {
      var form1, form2, form3;
      form1 = $("<form action=\"javascript:undefined;\" data-fw=\"\"></form>");
      form2 = $("<form action=\"javascript:undefined;\" data-fw='{ \"ajax\": true, \"submitUnchanged\": false }'></form>");
      form3 = $("<form action=\"javascript:undefined;\"></form>");
      tmpDiv.append(form1);
      tmpDiv.append(form2);
      tmpDiv.append(form3);
      Formwatcher.scanDocument();
      ok(form1.fwData("watcher"), "data-fw=\"\" should be handled by formwatcher.");
      ok(form2.fwData("watcher"), "data-fw=\"{ [...] }\" should be handled by formwatcher.");
      equal(form3.fwData("watcher"), undefined, "Without data-fw attribute this form should be ignored.");
      equal(form2.fwData("watcher").options.ajax, true, "The config should have been properly parsed");
      return equal(form2.fwData("watcher").options.submitUnchanged, false, "The config should have been properly parsed");
    });
    test("method is taken from form method", function() {
      var form1, form2, form3, form4, watcher;
      form1 = $("<form action=\"javascript:undefined;\" method='post'></form>");
      form2 = $("<form action=\"javascript:undefined;\" method='put'></form>");
      form3 = $("<form action=\"javascript:undefined;\" method=''></form>");
      form4 = $("<form action=\"javascript:undefined;\"></form>");
      watcher = new Watcher(form1);
      equal(watcher.options.ajaxMethod, "post", "The method should have been taken from the form.");
      watcher = new Watcher(form2);
      equal(watcher.options.ajaxMethod, "put", "The method should have been taken from the form.");
      watcher = new Watcher(form3);
      equal(watcher.options.ajaxMethod, "get", "Form had an empty method so the default get should have been used");
      watcher = new Watcher(form4);
      equal(watcher.options.ajaxMethod, "get", "Form had an empty method so the default get should have been used");
      watcher = new Watcher(form2, {
        ajaxMethod: "get"
      });
      equal(watcher.options.ajaxMethod, "get", "The options should have overwritten the form method");
      watcher = new Watcher(form2, {
        ajaxMethod: "postbla"
      });
      return equal(watcher.options.ajaxMethod, "get", "Invalid methods should be converted to get.");
    });
    module("Formwatcher validators", {
      setup: function() {
        return tmpDiv.empty();
      },
      teardown: function() {
        return tmpDiv.empty();
      }
    });
    test("Required", function() {
      var form, input, watcher;
      tmpDiv.append($("<form action=\"javascript:undefined;\"><input type=\"text\" class=\"required\" /></form>"));
      form = tmpDiv.find("form");
      input = form.find("input");
      watcher = new Watcher(form, {
        validate: true
      });
      ok(!watcher.validateForm(), "It should not validate because the input is required");
      input.val("some value");
      return ok(watcher.validateForm(), "Now it is filled in so validation doesn't fail.");
    });
    test("Email", function() {
      var email, form, i, input, validEmails, watcher, _results;
      tmpDiv.append($("<form action=\"javascript:undefined;\"><input type=\"text\" class=\"validate-email\" /></form>"));
      form = tmpDiv.find("form");
      input = form.find("input");
      watcher = new Watcher(form, {
        validate: true
      });
      ok(watcher.validateForm(), "It should validate if empty because it is not required");
      validEmails = ["m@tias.me", "niceandsimple@example.com", "simplewith+symbol@example.com", "less.common@example.com", "a.little.more.unusual@dept.example.com", "'@[10.10.10.10]"];
      i = 0;
      _results = [];
      while (i < validEmails.length) {
        email = validEmails[i];
        input.val(email);
        ok(watcher.validateForm(), email + " is a valid address");
        _results.push(i++);
      }
      return _results;
    });
    module("Formwatcher decorators", {
      setup: function() {
        return tmpDiv.empty();
      },
      teardown: function() {
        return tmpDiv.empty();
      }
    });
    return test("Hint", function() {
      var form, input1, input2, input3;
      tmpDiv.append($("<form action=\"javascript:undefined;\"><input id=\"i1\" type=\"text\" data-hint=\"Test1\" /><input id=\"i2\" type=\"text\" value=\"prefilled\" data-hint=\"Test2\" /><input id=\"i3\" type=\"text\" data-hint=\"Test3\" /></form>"));
      form = $("form", tmpDiv);
      input1 = $("#i1", form);
      input2 = $("#i2", form);
      input3 = $("#i3", form);
      new Watcher(form);
      stop();
      return setTimeout((function() {
        var hint1, hint2, hint3;
        hint1 = input1.parent().find(".hint");
        hint2 = input2.parent().find(".hint");
        hint3 = input3.parent().find(".hint");
        ok(hint1.length, "Input1 should have a hint element.");
        equal(hint1.html(), "Test1", "The hint should be taken from data-hint");
        ok(hint2.length, "Input2 should have a hint element.");
        equal(hint2.html(), "Test2", "The hint should be taken from data-hint");
        ok(hint1.css("display") !== "none", "Hint1 should be visible");
        ok(hint2.css("display") === "none", "Hint2 should be hidden because it is prefilled");
        ok(hint3.css("display") !== "none", "Hint3 should also be visible because it is initially empty");
        return setTimeout((function() {
          input3.val("Somevalue");
          return setTimeout((function() {
            ok(hint3.css("display") === "none", "Hint3 should now be invisible since the browser autofilled it.");
            return start();
          }), 100);
        }), 2);
      }), 1);
    });
  };

}).call(this);
